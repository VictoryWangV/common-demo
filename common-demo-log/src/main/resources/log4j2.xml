<?xml version="1.0" encoding="UTF-8"?>
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->
<!-- status: Log4j内部日志的输出级别。当需要排查Log4j本身的问题时，可以将该级别调低 -->
<configuration monitorInterval="30" status="warn">
    <!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
    <!--变量配置-->
    <Properties>
        <!-- 格式化输出：%date表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %msg：日志消息，%n是换行符-->
        <property name="pattern" value="%-5level %date{yyyy-MM-dd HH:mm:ss.SSS} [%-30.30C{1.}] - %msg%n"/>
        <!-- 定义日志存储的路径 -->
        <property name="file.path" value="./logs/"/>
        <!-- 日志备份路径 -->
        <property name="backup.path" value="${file.path}/backups"/>
        <!-- 日志文件名称 -->
        <property name="filename" value="common-demo-log.log"/>
        <property name="root.level" value="${sys:log.level.logger.root:-ALL}"/>
        <!-- 控制台的日志输出级别 -->
        <property name="console.level" value="${sys:log.level.console:-INFO}"/>
        <!-- 日志文件的输出级别 -->
        <property name="file.level" value="${sys:log.level.file:-ALL}"/>
    </Properties>

    <appenders>
        <!-- 控制台输出 -->
        <console name="Console" target="SYSTEM_OUT">
            <ThresholdFilter level="${console.level}" onMatch="ACCEPT" onMismatch="DENY"/>
            <!--输出日志的格式-->
            <PatternLayout pattern="${pattern}"/>
        </console>
        <!-- 日志文件输出 -->
        <RollingFile name="File" fileName="${file.path}/${filename}"
                     filePattern="${backup.path}/${filename}-%d{yyyy-MM-dd}.gz">
            <ThresholdFilter level="${file.level}" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${pattern}"/>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖-->
            <DefaultRolloverStrategy>
                <!-- 日志文件备份的根目录 -->
                <Delete basePath="${backup.path}">
                    <!-- 匹配其中任意一种文件名规则 -->
                    <IfAll>
                        <IfFileName glob="*.gz"/>
                        <!-- 只保留最近30天的日志文件 -->
                        <IfLastModified age="P30D"/>
                    </IfAll>
                </Delete>
            </DefaultRolloverStrategy>
            <Policies>
                <!-- 日志默认同类型日志,多久生成一个新的日志文件,这个配置需要和filePattern结合使用;
                如果设置为1,filePattern是%d{yyyy-MM-dd}到天的格式,则间隔一天生成一个文件
                如果设置为12,filePattern是%d{yyyy-MM-dd-HH}到小时的格式,则间隔12小时生成一个文件 -->
                <TimeBasedTriggeringPolicy>
                    <interval>1</interval>
                    <!-- 截取时间对齐 -->
                    <modulate>true</modulate>
                </TimeBasedTriggeringPolicy>
            </Policies>
        </RollingFile>
    </appenders>

    <!--Logger节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等。-->
    <!--然后定义loggers，只有定义了logger并引入的appender，appender才会生效-->
    <loggers>
        <root level="${root.level}">
            <appender-ref ref="Console"/>
            <appender-ref ref="File"/>
        </root>
    </loggers>

</configuration>